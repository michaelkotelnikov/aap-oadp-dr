# WIP Copied from Idan's repo

kind: CronJob
apiVersion: batch/v1
metadata:
  name: aap-restore
  namespace: openshift-adp
spec:
  schedule: '*/25 * * * *'
  concurrencyPolicy: Allow
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: restore-schedule
              image: bitnami/kubectl
              command:
              - "/bin/sh"
              - "-c"
              - |
                kubectl delete pods --all -n rocket-chat
                # Capture the newest backup name
                NEWEST_BACKUP_NAME=$(kubectl get backups -n openshift-adp --sort-by=.metadata.creationTimestamp -o json | jq -r '.items[-1].metadata.name')

                # Create the Velero Restore CR with the captured backup name as the backupName
                cat <<EOF | kubectl apply -f -
                apiVersion: velero.io/v1
                kind: Restore
                metadata:
                  name: restore-rocket-chat
                  namespace: openshift-adp
                spec:
                  hooks:
                    resources:
                      - name: restore-hook-1
                        includedNamespaces:
                          - rocket-chat
                        labelSelector:
                          matchExpressions:
                            - key: posthook
                              operator: Exists
                        postHooks:
                          - exec:
                              command:
                                - /bin/sh
                                - '-c'
                                - >-
                                  sleep 60 && mongo rocket-chat-db:27017 --eval
                                  "rs.initiate({_id: 'rs0', members: [{_id:0,
                                  host:'localhost:27017'}]})"
                              execTimeout: 1m 
                              waitTimeout: 5m 
                              onError: Fail 
                              container: rocketchat-db # which contianer to execute the hook on 
                  existingResourcePolicy: update # if mentioned it will update resources and not skip if exsist 
                  restorePVs: true # allow to restore pvs
                  backupName: $NEWEST_BACKUP_NAME
                EOF
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          serviceAccountName: restore-sa
          serviceAccount: restore-sa
          securityContext: {}
          schedulerName: default-scheduler
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
